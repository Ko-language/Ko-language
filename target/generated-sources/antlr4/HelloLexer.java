// Generated from Hello.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class HelloLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__45=1, T__44=2, T__43=3, T__42=4, T__41=5, T__40=6, T__39=7, T__38=8, 
		T__37=9, T__36=10, T__35=11, T__34=12, T__33=13, T__32=14, T__31=15, T__30=16, 
		T__29=17, T__28=18, T__27=19, T__26=20, T__25=21, T__24=22, T__23=23, 
		T__22=24, T__21=25, T__20=26, T__19=27, T__18=28, T__17=29, T__16=30, 
		T__15=31, T__14=32, T__13=33, T__12=34, T__11=35, T__10=36, T__9=37, T__8=38, 
		T__7=39, T__6=40, T__5=41, T__4=42, T__3=43, T__2=44, T__1=45, T__0=46, 
		NUM=47, IDENT=48, PARENT=49, THIS=50, RETURN=51, CONTINUE=52, BREAK=53, 
		WS=54;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'"
	};
	public static final String[] ruleNames = {
		"T__45", "T__44", "T__43", "T__42", "T__41", "T__40", "T__39", "T__38", 
		"T__37", "T__36", "T__35", "T__34", "T__33", "T__32", "T__31", "T__30", 
		"T__29", "T__28", "T__27", "T__26", "T__25", "T__24", "T__23", "T__22", 
		"T__21", "T__20", "T__19", "T__18", "T__17", "T__16", "T__15", "T__14", 
		"T__13", "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", 
		"T__4", "T__3", "T__2", "T__1", "T__0", "NUM", "IDENT", "PARENT", "THIS", 
		"RETURN", "CONTINUE", "BREAK", "WS"
	};


	public HelloLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Hello.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\28\u011a\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4"+
		"\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3"+
		"\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17"+
		"\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25"+
		"\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31"+
		"\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37"+
		"\3\37\3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3%\3&\3&\3\'\3\'\3(\3("+
		"\3)\3)\3)\3*\3*\3+\3+\3+\3+\3,\3,\3,\3,\3,\3-\3-\3.\3.\3/\3/\3/\3\60\3"+
		"\60\3\60\7\60\u00f1\n\60\f\60\16\60\u00f4\13\60\5\60\u00f6\n\60\3\61\3"+
		"\61\7\61\u00fa\n\61\f\61\16\61\u00fd\13\61\3\62\3\62\3\62\3\63\3\63\3"+
		"\63\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3"+
		"\66\3\66\3\67\6\67\u0115\n\67\r\67\16\67\u0116\3\67\3\67\2\28\3\3\5\4"+
		"\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22"+
		"#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C"+
		"#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8\3\2\7\3\2"+
		"\63;\3\2\62;\6\2C\\aac|\uac02\ud7a5\7\2\62;C\\aac|\uac02\ud7a5\5\2\13"+
		"\f\17\17\"\"\u011d\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E"+
		"\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2"+
		"\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2"+
		"\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k"+
		"\3\2\2\2\2m\3\2\2\2\3o\3\2\2\2\5q\3\2\2\2\7v\3\2\2\2\ty\3\2\2\2\13|\3"+
		"\2\2\2\r\177\3\2\2\2\17\u0083\3\2\2\2\21\u0086\3\2\2\2\23\u008a\3\2\2"+
		"\2\25\u008c\3\2\2\2\27\u008e\3\2\2\2\31\u0091\3\2\2\2\33\u0093\3\2\2\2"+
		"\35\u0096\3\2\2\2\37\u0099\3\2\2\2!\u009d\3\2\2\2#\u00a0\3\2\2\2%\u00a2"+
		"\3\2\2\2\'\u00a4\3\2\2\2)\u00a6\3\2\2\2+\u00a8\3\2\2\2-\u00ab\3\2\2\2"+
		"/\u00af\3\2\2\2\61\u00b2\3\2\2\2\63\u00b5\3\2\2\2\65\u00b7\3\2\2\2\67"+
		"\u00ba\3\2\2\29\u00bc\3\2\2\2;\u00bf\3\2\2\2=\u00c2\3\2\2\2?\u00c4\3\2"+
		"\2\2A\u00c6\3\2\2\2C\u00c9\3\2\2\2E\u00cb\3\2\2\2G\u00cd\3\2\2\2I\u00cf"+
		"\3\2\2\2K\u00d2\3\2\2\2M\u00d4\3\2\2\2O\u00d6\3\2\2\2Q\u00d8\3\2\2\2S"+
		"\u00db\3\2\2\2U\u00dd\3\2\2\2W\u00e1\3\2\2\2Y\u00e6\3\2\2\2[\u00e8\3\2"+
		"\2\2]\u00ea\3\2\2\2_\u00f5\3\2\2\2a\u00f7\3\2\2\2c\u00fe\3\2\2\2e\u0101"+
		"\3\2\2\2g\u0104\3\2\2\2i\u0109\3\2\2\2k\u010f\3\2\2\2m\u0114\3\2\2\2o"+
		"p\7\61\2\2p\4\3\2\2\2qr\7\uc746\2\2rs\7\"\2\2st\7\ubc1a\2\2tu\7\ubcf7"+
		"\2\2u\6\3\2\2\2vw\7\uacf7\2\2wx\7\uc6ab\2\2x\b\3\2\2\2yz\7\uad6e\2\2z"+
		"{\7\ud606\2\2{\n\3\2\2\2|}\7\ud657\2\2}~\7\uc7a7\2\2~\f\3\2\2\2\177\u0080"+
		"\7.\2\2\u0080\u0081\7\"\2\2\u0081\u0082\7]\2\2\u0082\16\3\2\2\2\u0083"+
		"\u0084\7#\2\2\u0084\u0085\7?\2\2\u0085\20\3\2\2\2\u0086\u0087\7\uc776"+
		"\2\2\u0087\u0088\7\ub77e\2\2\u0088\u0089\7\uba76\2\2\u0089\22\3\2\2\2"+
		"\u008a\u008b\7}\2\2\u008b\24\3\2\2\2\u008c\u008d\7?\2\2\u008d\26\3\2\2"+
		"\2\u008e\u008f\7\ub77e\2\2\u008f\u0090\7\uba76\2\2\u0090\30\3\2\2\2\u0091"+
		"\u0092\7\177\2\2\u0092\32\3\2\2\2\u0093\u0094\7>\2\2\u0094\u0095\7?\2"+
		"\2\u0095\34\3\2\2\2\u0096\u0097\7\uac72\2\2\u0097\u0098\7\uc9d5\2\2\u0098"+
		"\36\3\2\2\2\u0099\u009a\7\uadfa\2\2\u009a\u009b\7\ub9ae\2\2\u009b\u009c"+
		"\7\uace2\2\2\u009c \3\2\2\2\u009d\u009e\7_\2\2\u009e\u009f\7\ub97e\2\2"+
		"\u009f\"\3\2\2\2\u00a0\u00a1\7*\2\2\u00a1$\3\2\2\2\u00a2\u00a3\7,\2\2"+
		"\u00a3&\3\2\2\2\u00a4\u00a5\7.\2\2\u00a5(\3\2\2\2\u00a6\u00a7\7\60\2\2"+
		"\u00a7*\3\2\2\2\u00a8\u00a9\7>\2\2\u00a9\u00aa\7/\2\2\u00aa,\3\2\2\2\u00ab"+
		"\u00ac\7\uc546\2\2\u00ac\u00ad\7\ub2ca\2\2\u00ad\u00ae\7\uba76\2\2\u00ae"+
		".\3\2\2\2\u00af\u00b0\7\ud63b\2\2\u00b0\u00b1\7\uc742\2\2\u00b1\60\3\2"+
		"\2\2\u00b2\u00b3\7_\2\2\u00b3\u00b4\7\uc742\2\2\u00b4\62\3\2\2\2\u00b5"+
		"\u00b6\7\ud2c2\2\2\u00b6\64\3\2\2\2\u00b7\u00b8\7@\2\2\u00b8\u00b9\7?"+
		"\2\2\u00b9\66\3\2\2\2\u00ba\u00bb\7]\2\2\u00bb8\3\2\2\2\u00bc\u00bd\7"+
		"/\2\2\u00bd\u00be\7/\2\2\u00be:\3\2\2\2\u00bf\u00c0\7-\2\2\u00c0\u00c1"+
		"\7-\2\2\u00c1<\3\2\2\2\u00c2\u00c3\7>\2\2\u00c3>\3\2\2\2\u00c4\u00c5\7"+
		"~\2\2\u00c5@\3\2\2\2\u00c6\u00c7\7_\2\2\u00c7\u00c8\7\uc746\2\2\u00c8"+
		"B\3\2\2\2\u00c9\u00ca\7_\2\2\u00caD\3\2\2\2\u00cb\u00cc\7@\2\2\u00ccF"+
		"\3\2\2\2\u00cd\u00ce\7\ucc3a\2\2\u00ceH\3\2\2\2\u00cf\u00d0\7\ub612\2"+
		"\2\u00d0\u00d1\7\ub296\2\2\u00d1J\3\2\2\2\u00d2\u00d3\7#\2\2\u00d3L\3"+
		"\2\2\2\u00d4\u00d5\7%\2\2\u00d5N\3\2\2\2\u00d6\u00d7\7\'\2\2\u00d7P\3"+
		"\2\2\2\u00d8\u00d9\7\uacc6\2\2\u00d9\u00da\7\uc18f\2\2\u00daR\3\2\2\2"+
		"\u00db\u00dc\7+\2\2\u00dcT\3\2\2\2\u00dd\u00de\7\uafba\2\2\u00de\u00df"+
		"\7\ub7ee\2\2\u00df\u00e0\7\ubbfa\2\2\u00e0V\3\2\2\2\u00e1\u00e2\7\uac02"+
		"\2\2\u00e2\u00e3\7\uc83a\2\2\u00e3\u00e4\7\uc626\2\2\u00e4\u00e5\7\uae32"+
		"\2\2\u00e5X\3\2\2\2\u00e6\u00e7\7-\2\2\u00e7Z\3\2\2\2\u00e8\u00e9\7/\2"+
		"\2\u00e9\\\3\2\2\2\u00ea\u00eb\7_\2\2\u00eb\u00ec\7\ub296\2\2\u00ec^\3"+
		"\2\2\2\u00ed\u00f6\7\62\2\2\u00ee\u00f2\t\2\2\2\u00ef\u00f1\t\3\2\2\u00f0"+
		"\u00ef\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2"+
		"\2\2\u00f3\u00f6\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00ed\3\2\2\2\u00f5"+
		"\u00ee\3\2\2\2\u00f6`\3\2\2\2\u00f7\u00fb\t\4\2\2\u00f8\u00fa\t\5\2\2"+
		"\u00f9\u00f8\3\2\2\2\u00fa\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc"+
		"\3\2\2\2\u00fcb\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\u00ff\7\ubd82\2\2\u00ff"+
		"\u0100\7\ubaaa\2\2\u0100d\3\2\2\2\u0101\u0102\7\uc792\2\2\u0102\u0103"+
		"\7\uc2e2\2\2\u0103f\3\2\2\2\u0104\u0105\7\ub0b6\2\2\u0105\u0106\7\ubcf6"+
		"\2\2\u0106\u0107\7\ub0b6\2\2\u0107\u0108\7\uae32\2\2\u0108h\3\2\2\2\u0109"+
		"\u010a\7\ub2e6\2\2\u010a\u010b\7\uc2de\2\2\u010b\u010c\7\"\2\2\u010c\u010d"+
		"\7\uc706\2\2\u010d\u010e\7\ub85e\2\2\u010ej\3\2\2\2\u010f\u0110\7\ub09a"+
		"\2\2\u0110\u0111\7\uac02\2\2\u0111\u0112\7\uae32\2\2\u0112l\3\2\2\2\u0113"+
		"\u0115\t\6\2\2\u0114\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0114\3\2"+
		"\2\2\u0116\u0117\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0119\b\67\2\2\u0119"+
		"n\3\2\2\2\b\2\u00f2\u00f5\u00f9\u00fb\u0116\3\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}